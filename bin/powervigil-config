#!/bin/bash

################################################################################
# PowerVigil™ - Kiosk Performance & Recovery Framework
# Copyright (C) 2025 - GPL v3 License
# 
# Main Configuration Module
# Version: 1.0.0
# 
# This script implements the 13-Layer Protection Matrix to completely disable
# all power management features and ensure maximum performance.
################################################################################

set -e

# PowerVigil™ Branding
POWERVIGIL_VERSION="1.0.0"
POWERVIGIL_NAME="PowerVigil™"
POWERVIGIL_TAGLINE="Your display's guardian against sleep, slowdown, and system fatigue"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Display PowerVigil™ banner
show_banner() {
    echo -e "${CYAN}${BOLD}"
    echo "═══════════════════════════════════════════════════════════════════"
    echo "   ____                        _   ___      _ _ ™                  "
    echo "  |  _ \ _____      _____ _ __| | / (_) __ _(_) |                 "
    echo "  | |_) / _ \ \ /\ / / _ \ '__| |/ /| |/ _\` | | |                "
    echo "  |  __/ (_) \ V  V /  __/ |   \   / | | (_| | | |                "
    echo "  |_|   \___/ \_/\_/ \___|_|    \_/  |_|\__, |_|_|                "
    echo "                                         |___/                      "
    echo "═══════════════════════════════════════════════════════════════════"
    echo -e "${NC}${MAGENTA}${BOLD}  $POWERVIGIL_TAGLINE${NC}"
    echo -e "${BLUE}  Version: $POWERVIGIL_VERSION | License: GPL v3${NC}"
    echo "═══════════════════════════════════════════════════════════════════"
    echo ""
}

log_step() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} ${BOLD}$1${NC}"
}

log_success() {
    echo -e "${GREEN}  ✓${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}  !${NC} $1"
}

log_error() {
    echo -e "${RED}  ✗${NC} $1"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root"
        echo "Please run: sudo $0"
        exit 1
    fi
}

# Backup configuration files
backup_configs() {
    log_step "Creating configuration backups..."
    
    BACKUP_DIR="/var/backups/powervigil/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    
    # Backup files if they exist
    [ -f /etc/default/grub ] && cp /etc/default/grub "$BACKUP_DIR/" && log_success "Backed up GRUB configuration"
    [ -d /etc/X11/xorg.conf.d ] && cp -r /etc/X11/xorg.conf.d "$BACKUP_DIR/" && log_success "Backed up X11 configuration"
    [ -d /etc/systemd/logind.conf.d ] && cp -r /etc/systemd/logind.conf.d "$BACKUP_DIR/" && log_success "Backed up logind configuration"
    
    echo "$BACKUP_DIR" > /var/lib/powervigil/last_backup
    log_success "Backups saved to: $BACKUP_DIR"
}

# Layer 1: Systemd power management targets
configure_systemd_targets() {
    log_step "Layer 1: Masking systemd power targets..."
    
    systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target
    log_success "Systemd sleep/suspend targets masked"
}

# Layer 2: Console blanking
configure_console_blanking() {
    log_step "Layer 2: Disabling console blanking..."
    
    # Add to rc.local
    if [ ! -f /etc/rc.local ]; then
        cat > /etc/rc.local << 'EOF'
#!/bin/bash
# PowerVigil™ Console Configuration
setterm -blank 0 -powersave off -powerdown 0
exit 0
EOF
        chmod +x /etc/rc.local
    else
        if ! grep -q "setterm -blank 0" /etc/rc.local; then
            sed -i '/^exit 0/i setterm -blank 0 -powersave off -powerdown 0' /etc/rc.local
        fi
    fi
    
    # Apply immediately
    echo 0 > /sys/module/kernel/parameters/consoleblank 2>/dev/null || true
    log_success "Console blanking disabled"
}

# Layer 3: GRUB kernel parameters
configure_grub() {
    log_step "Layer 3: Configuring kernel boot parameters..."
    
    cp /etc/default/grub /etc/default/grub.backup.$(date +%Y%m%d)
    
    if ! grep -q "consoleblank=0" /etc/default/grub; then
        # IMPORTANT: We do NOT disable ACPI/APIC as it breaks modern systems!
        # Only add safe power management parameters
        sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="\(.*\)"/GRUB_CMDLINE_LINUX_DEFAULT="\1 consoleblank=0 intel_idle.max_cstate=1 processor.max_cstate=1"/' /etc/default/grub
        update-grub
        log_success "Kernel parameters updated (reboot required)"
    else
        log_success "Kernel parameters already configured"
    fi
}

# Layer 4: CPU Governor
configure_cpu_governor() {
    log_step "Layer 4: Setting CPU governor to performance..."
    
    apt-get install -y cpufrequtils 2>/dev/null || true
    
    cat > /etc/default/cpufrequtils << 'EOF'
# PowerVigil™ CPU Configuration
GOVERNOR="performance"
MIN_SPEED="0"
MAX_SPEED="0"
EOF
    
    # Set immediately
    for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
        echo "performance" > "$cpu" 2>/dev/null || true
    done
    
    log_success "CPU governor set to performance mode"
}

# Layer 5: USB autosuspend
configure_usb() {
    log_step "Layer 5: Disabling USB autosuspend..."
    
    cat > /etc/udev/rules.d/50-usb-autosuspend.rules << 'EOF'
# PowerVigil™ USB Configuration
ACTION=="add", SUBSYSTEM=="usb", TEST=="power/control", ATTR{power/control}="on"
ACTION=="add", SUBSYSTEM=="usb", TEST=="power/autosuspend", ATTR{power/autosuspend}="-1"
EOF
    
    # Apply immediately
    for i in /sys/bus/usb/devices/*/power/control; do
        echo "on" > "$i" 2>/dev/null || true
    done
    
    for i in /sys/bus/usb/devices/*/power/autosuspend; do
        echo "-1" > "$i" 2>/dev/null || true
    done
    
    log_success "USB autosuspend disabled"
}

# Layer 6: X11/Wayland display management
configure_display() {
    log_step "Layer 6: Configuring display power management..."
    
    mkdir -p /etc/X11/xorg.conf.d/
    cat > /etc/X11/xorg.conf.d/10-powervigil.conf << 'EOF'
# PowerVigil™ Display Configuration
Section "ServerFlags"
    Option "StandbyTime" "0"
    Option "SuspendTime" "0"
    Option "OffTime" "0"
    Option "BlankTime" "0"
    Option "DPMS" "false"
EndSection

Section "Monitor"
    Identifier "Monitor0"
    Option "DPMS" "false"
EndSection

Section "Extensions"
    Option "DPMS" "Disable"
EndSection
EOF
    
    # X11 session script
    cat > /etc/X11/Xsession.d/99-powervigil << 'EOF'
#!/bin/sh
# PowerVigil™ X11 Session Configuration
xset -dpms 2>/dev/null || true
xset s noblank 2>/dev/null || true
xset s off 2>/dev/null || true
xset s 0 0 2>/dev/null || true
EOF
    chmod +x /etc/X11/Xsession.d/99-powervigil
    
    log_success "Display power management disabled"
}

# Layer 7: NetworkManager
configure_network() {
    log_step "Layer 7: Configuring NetworkManager power saving..."
    
    if [ -f /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf ]; then
        sed -i 's/wifi.powersave = 3/wifi.powersave = 2/' /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf
    fi
    
    cat > /etc/NetworkManager/conf.d/powervigil.conf << 'EOF'
# PowerVigil™ Network Configuration
[connection]
wifi.powersave = 2
EOF
    
    log_success "WiFi power saving disabled"
}

# Layer 8: Systemd-logind
configure_logind() {
    log_step "Layer 8: Configuring systemd-logind..."
    
    mkdir -p /etc/systemd/logind.conf.d/
    cat > /etc/systemd/logind.conf.d/powervigil.conf << 'EOF'
# PowerVigil™ Logind Configuration
[Login]
IdleAction=ignore
IdleActionSec=0
HandleSuspendKey=ignore
HandleHibernateKey=ignore
HandleLidSwitch=ignore
HandleLidSwitchDocked=ignore
HandleLidSwitchExternalPower=ignore
HandlePowerKey=ignore
InhibitDelayMaxSec=0
UserTasksMax=infinity
EOF
    
    log_success "Systemd-logind idle actions disabled"
}

# Layer 9: Remove screensavers
remove_screensavers() {
    log_step "Layer 9: Removing screensaver packages..."
    
    apt-get remove --purge -y light-locker xscreensaver gnome-screensaver 2>/dev/null || true
    log_success "Screensaver packages removed"
}

# Layer 10: GPU configuration
configure_gpu() {
    log_step "Layer 10: Configuring GPU power management..."
    
    # NVIDIA
    if command -v nvidia-smi &> /dev/null; then
        nvidia-smi -pm 1 2>/dev/null || true
        nvidia-settings -a "[gpu:0]/GpuPowerMizerMode=1" 2>/dev/null || true
        log_success "NVIDIA GPU set to persistence mode"
    fi
    
    # AMD
    if [ -d /sys/class/drm/card0/device ]; then
        echo "performance" > /sys/class/drm/card0/device/power_dpm_state 2>/dev/null || true
        echo "high" > /sys/class/drm/card0/device/power_dpm_force_performance_level 2>/dev/null || true
        log_success "AMD GPU set to performance mode"
    fi
}

# Layer 11: PowerVigil™ enforcement service
create_service() {
    log_step "Layer 11: Creating PowerVigil™ enforcement service..."
    
    # Create directories
    mkdir -p /usr/local/bin
    mkdir -p /var/lib/powervigil
    mkdir -p /var/log/powervigil
    
    # Create enforcement script
    cat > /usr/local/bin/powervigil-enforce << 'EOFSCRIPT'
#!/bin/bash
# PowerVigil™ Enforcement Script

# Disable console blanking
setterm -blank 0 -powersave off -powerdown 0 2>/dev/null || true
echo 0 > /sys/module/kernel/parameters/consoleblank 2>/dev/null || true

# Disable DPMS if X is running
if [ -n "$DISPLAY" ] || [ -n "$WAYLAND_DISPLAY" ]; then
    export DISPLAY=${DISPLAY:-:0}
    xset -dpms 2>/dev/null || true
    xset s noblank 2>/dev/null || true
    xset s off 2>/dev/null || true
    xset s 0 0 2>/dev/null || true
fi

# CPU Performance
for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
    echo "performance" > "$cpu" 2>/dev/null || true
done

# USB no autosuspend
for i in /sys/bus/usb/devices/*/power/control; do
    echo "on" > "$i" 2>/dev/null || true
done

# GPU settings
if command -v nvidia-smi &> /dev/null; then
    nvidia-smi -pm 1 2>/dev/null || true
fi

if [ -d /sys/class/drm/card0/device ]; then
    echo "performance" > /sys/class/drm/card0/device/power_dpm_state 2>/dev/null || true
    echo "high" > /sys/class/drm/card0/device/power_dpm_force_performance_level 2>/dev/null || true
fi

exit 0
EOFSCRIPT
    
    chmod +x /usr/local/bin/powervigil-enforce
    log_success "PowerVigil™ enforcement script created"
}

# Layer 12: ACPI configuration
configure_acpi() {
    log_step "Layer 12: Disabling ACPI events..."
    
    systemctl stop acpid 2>/dev/null || true
    systemctl disable acpid 2>/dev/null || true
    log_success "ACPI events disabled"
}

# Layer 12b: Disable conflicting power management services
disable_conflicting_services() {
    log_step "Layer 12b: Disabling conflicting power management services..."
    
    local conflicting_services=(
        "power-profiles-daemon.service"
        "upower.service"
        "thermald.service"
        "tlp.service"
        "laptop-mode.service"
        "auto-cpufreq.service"
    )
    
    for service in "${conflicting_services[@]}"; do
        if systemctl list-unit-files | grep -q "^${service}"; then
            systemctl stop "$service" 2>/dev/null || true
            systemctl disable "$service" 2>/dev/null || true
            systemctl mask "$service" 2>/dev/null || true
            log_success "Disabled $service"
        fi
    done
}

# Layer 13: Desktop environment settings
configure_desktop() {
    log_step "Layer 13: Configuring desktop environment..."
    
    # GNOME
    if command -v gsettings &> /dev/null; then
        log_success "Configuring GNOME power settings..."
        sudo -u $SUDO_USER gsettings set org.gnome.settings-daemon.plugins.power idle-dim false 2>/dev/null || true
        sudo -u $SUDO_USER gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'nothing' 2>/dev/null || true
        sudo -u $SUDO_USER gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-battery-type 'nothing' 2>/dev/null || true
        sudo -u $SUDO_USER gsettings set org.gnome.desktop.session idle-delay 0 2>/dev/null || true
        sudo -u $SUDO_USER gsettings set org.gnome.desktop.screensaver lock-enabled false 2>/dev/null || true
        sudo -u $SUDO_USER gsettings set org.gnome.desktop.screensaver idle-activation-enabled false 2>/dev/null || true
    fi
    
    # KDE Plasma
    if [ -d /usr/share/plasma ]; then
        log_success "Configuring KDE Plasma power settings..."
        cat > /home/$SUDO_USER/.config/powermanagementprofilesrc << 'EOF'
[AC][DPMSControl]
idleTime=0

[AC][SuspendSession]
idleTime=0
suspendType=0

[Battery][DPMSControl]
idleTime=0

[Battery][SuspendSession]
idleTime=0
suspendType=0
EOF
        chown $SUDO_USER:$SUDO_USER /home/$SUDO_USER/.config/powermanagementprofilesrc 2>/dev/null || true
    fi
}

# Parse command line arguments
AUTO_MODE=false
QUIET_MODE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --auto)
            AUTO_MODE=true
            shift
            ;;
        --quiet)
            QUIET_MODE=true
            shift
            ;;
        --help)
            echo "Usage: $0 [OPTIONS]"
            echo "Options:"
            echo "  --auto    Run in automatic mode (no prompts)"
            echo "  --quiet   Suppress banner and non-essential output"
            echo "  --help    Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Main execution
main() {
    if [ "$QUIET_MODE" != "true" ]; then
        show_banner
    fi
    check_root
    
    log_step "Starting PowerVigil™ configuration..."
    echo ""
    
    # Create necessary directories
    mkdir -p /var/lib/powervigil
    mkdir -p /var/log/powervigil
    mkdir -p /var/backups/powervigil
    
    # Execute all layers
    backup_configs
    echo ""
    configure_systemd_targets
    configure_console_blanking
    configure_grub
    configure_cpu_governor
    configure_usb
    configure_display
    configure_network
    configure_logind
    remove_screensavers
    configure_gpu
    create_service
    configure_acpi
    disable_conflicting_services
    configure_desktop
    
    echo ""
    echo -e "${GREEN}${BOLD}═══════════════════════════════════════════════════════════════════${NC}"
    echo -e "${GREEN}${BOLD}   PowerVigil™ Configuration Complete!${NC}"
    echo -e "${GREEN}${BOLD}═══════════════════════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "${CYAN}Summary of Protection Layers Applied:${NC}"
    echo -e "  ${GREEN}✓${NC} Layer 1:  Systemd sleep/suspend targets masked"
    echo -e "  ${GREEN}✓${NC} Layer 2:  Console blanking disabled"
    echo -e "  ${GREEN}✓${NC} Layer 3:  Kernel parameters configured"
    echo -e "  ${GREEN}✓${NC} Layer 4:  CPU governor set to performance"
    echo -e "  ${GREEN}✓${NC} Layer 5:  USB autosuspend disabled"
    echo -e "  ${GREEN}✓${NC} Layer 6:  X11/Wayland DPMS disabled"
    echo -e "  ${GREEN}✓${NC} Layer 7:  NetworkManager power saving disabled"
    echo -e "  ${GREEN}✓${NC} Layer 8:  Systemd-logind idle actions disabled"
    echo -e "  ${GREEN}✓${NC} Layer 9:  Screensavers removed"
    echo -e "  ${GREEN}✓${NC} Layer 10: GPU power management configured"
    echo -e "  ${GREEN}✓${NC} Layer 11: Enforcement service created"
    echo -e "  ${GREEN}✓${NC} Layer 12: ACPI events disabled"
    echo -e "  ${GREEN}✓${NC} Layer 13: Desktop environment configured"
    echo ""
    echo -e "${YELLOW}${BOLD}IMPORTANT:${NC} ${YELLOW}A system reboot is required for all settings to take effect.${NC}"
    echo ""
    echo -e "${CYAN}Next steps:${NC}"
    echo -e "  1. ${BOLD}sudo systemctl reboot${NC} - Reboot the system"
    echo -e "  2. ${BOLD}sudo powervigil-verify${NC} - Verify configuration after reboot"
    echo -e "  3. ${BOLD}sudo systemctl status powervigil-watchdog${NC} - Check watchdog status"
    echo ""
    echo -e "${MAGENTA}${BOLD}PowerVigil™${NC} - ${MAGENTA}$POWERVIGIL_TAGLINE${NC}"
    echo ""
}

# Run main function
main "$@"
