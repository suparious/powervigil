#!/bin/bash

################################################################################
# PowerVigil™ - Aggressive Display Wake Enforcement
# Version: 1.0.2
# 
# This script aggressively prevents display sleep and continuously enforces
# wake state. Run this to debug and fix persistent display sleep issues.
################################################################################

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

echo -e "${CYAN}${BOLD}PowerVigil™ - Aggressive Display Wake Enforcement${NC}"
echo "=================================================="
echo ""

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}This script must be run as root${NC}"
   echo "Please run: sudo $0"
   exit 1
fi

echo -e "${BLUE}Applying aggressive display wake settings...${NC}"
echo ""

# 1. Force disable DPMS at multiple levels
echo "1. Disabling DPMS at all levels..."

# X11 Configuration - More aggressive
cat > /etc/X11/xorg.conf.d/20-no-display-sleep.conf << 'EOF'
Section "ServerFlags"
    Option "StandbyTime" "0"
    Option "SuspendTime" "0"
    Option "OffTime" "0"
    Option "BlankTime" "0"
    Option "DPMS" "false"
    Option "NoPM" "true"
EndSection

Section "Monitor"
    Identifier "Monitor0"
    Option "DPMS" "false"
EndSection

Section "Extensions"
    Option "DPMS" "Disable"
EndSection

Section "ServerLayout"
    Identifier "ServerLayout0"
    Option "StandbyTime" "0"
    Option "SuspendTime" "0"
    Option "OffTime" "0"
    Option "BlankTime" "0"
EndSection
EOF
echo -e "  ${GREEN}✓${NC} X11 configuration updated"

# 2. Create aggressive xset enforcement script
echo "2. Creating display wake enforcement daemon..."
cat > /usr/local/bin/powervigil-display-wake << 'EOFSCRIPT'
#!/bin/bash
# PowerVigil Display Wake Daemon
# Aggressively prevents display from sleeping

LOG_FILE="/var/log/powervigil/display-wake.log"
mkdir -p /var/log/powervigil

log_msg() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

log_msg "PowerVigil Display Wake Daemon started"

# Function to wake display
wake_display() {
    # Try all possible display numbers
    for display in :0 :0.0 :1 :1.0; do
        export DISPLAY=$display
        
        # Force DPMS off
        xset -dpms 2>/dev/null
        xset dpms 0 0 0 2>/dev/null
        xset dpms force on 2>/dev/null
        
        # Disable screen saver
        xset s off 2>/dev/null
        xset s noblank 2>/dev/null
        xset s 0 0 2>/dev/null
        xset -display $display s off 2>/dev/null
        
        # Force monitor on
        xset dpms force on 2>/dev/null
    done
    
    # Also try with XAUTHORITY for different users
    for xauth in /home/*/.Xauthority /var/run/lightdm/root/:0 /var/lib/gdm/.Xauthority; do
        if [ -f "$xauth" ]; then
            export XAUTHORITY=$xauth
            export DISPLAY=:0
            xset -dpms 2>/dev/null
            xset dpms force on 2>/dev/null
            xset s off 2>/dev/null
        fi
    done
}

# Initial wake
wake_display
log_msg "Initial display wake completed"

# Main loop - wake display every 30 seconds
while true; do
    wake_display
    
    # Send a fake input event to prevent idle
    DISPLAY=:0 xdotool mousemove_relative 1 0 2>/dev/null
    DISPLAY=:0 xdotool mousemove_relative -- -1 0 2>/dev/null
    
    sleep 30
done
EOFSCRIPT
chmod +x /usr/local/bin/powervigil-display-wake
echo -e "  ${GREEN}✓${NC} Display wake daemon created"

# 3. Create systemd service for display wake
echo "3. Creating systemd service..."
cat > /etc/systemd/system/powervigil-display-wake.service << 'EOF'
[Unit]
Description=PowerVigil Display Wake Enforcement
After=display-manager.service graphical.target
Wants=graphical.target

[Service]
Type=simple
ExecStart=/usr/local/bin/powervigil-display-wake
Restart=always
RestartSec=10
Environment="DISPLAY=:0"
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=graphical.target
EOF
echo -e "  ${GREEN}✓${NC} Systemd service created"

# 4. Graphics driver specific fixes
echo "4. Applying graphics driver specific fixes..."

# Intel graphics
if lspci | grep -i "vga" | grep -i "intel" &>/dev/null; then
    echo "  Intel graphics detected"
    # Disable Intel graphics power management
    mkdir -p /etc/X11/xorg.conf.d/
    cat > /etc/X11/xorg.conf.d/20-intel-no-pm.conf << 'EOF'
Section "Device"
    Identifier  "Intel Graphics"
    Driver      "intel"
    Option      "DPMS" "false"
    Option      "AccelMethod" "sna"
    Option      "TearFree" "true"
    Option      "DRI" "3"
EndSection
EOF
    
    # Kernel parameters for Intel
    if [ -d /sys/module/i915/parameters ]; then
        echo 0 > /sys/module/i915/parameters/enable_dc 2>/dev/null || true
        echo -1 > /sys/module/i915/parameters/enable_psr 2>/dev/null || true
        echo 0 > /sys/module/i915/parameters/enable_fbc 2>/dev/null || true
    fi
    echo -e "  ${GREEN}✓${NC} Intel graphics configured"
fi

# NVIDIA graphics
if lspci | grep -i "vga" | grep -i "nvidia" &>/dev/null; then
    echo "  NVIDIA graphics detected"
    if command -v nvidia-settings &>/dev/null; then
        # Disable NVIDIA power management
        nvidia-settings -a "[gpu:0]/GPUPowerMizerMode=1" 2>/dev/null || true
        nvidia-smi -pm 1 2>/dev/null || true
    fi
    
    cat > /etc/X11/xorg.conf.d/20-nvidia-no-pm.conf << 'EOF'
Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    Option         "DPMS" "false"
    Option         "HardDPMS" "false"
    Option         "RegistryDwords" "PowerMizerEnable=0x1; PerfLevelSrc=0x2222; PowerMizerDefault=0x1; PowerMizerDefaultAC=0x1"
EOF
    echo -e "  ${GREEN}✓${NC} NVIDIA graphics configured"
fi

# AMD graphics
if lspci | grep -i "vga" | grep -i "amd\|radeon" &>/dev/null; then
    echo "  AMD graphics detected"
    if [ -d /sys/class/drm/card0/device ]; then
        echo "high" > /sys/class/drm/card0/device/power_dpm_force_performance_level 2>/dev/null || true
        echo "performance" > /sys/class/drm/card0/device/power_dpm_state 2>/dev/null || true
    fi
    echo -e "  ${GREEN}✓${NC} AMD graphics configured"
fi

# 5. Desktop environment specific overrides
echo "5. Overriding desktop environment settings..."

# GNOME/GDM
if pgrep -x "gnome-shell" &>/dev/null; then
    echo "  GNOME detected"
    # Global dconf settings
    cat > /etc/dconf/db/local.d/01-powervigil << 'EOF'
[org/gnome/settings-daemon/plugins/power]
idle-dim=false
sleep-inactive-ac-type='nothing'
sleep-inactive-battery-type='nothing'
sleep-inactive-ac-timeout=0
sleep-inactive-battery-timeout=0

[org/gnome/desktop/session]
idle-delay=uint32 0

[org/gnome/desktop/screensaver]
lock-enabled=false
idle-activation-enabled=false
lock-delay=uint32 0

[org/gnome/settings-daemon/plugins/power]
ambient-enabled=false
idle-brightness=100
EOF
    dconf update
    echo -e "  ${GREEN}✓${NC} GNOME settings applied"
fi

# KDE
if pgrep -x "plasmashell" &>/dev/null; then
    echo "  KDE detected"
    # Disable KDE screen energy saving
    kwriteconfig5 --file powermanagementprofilesrc --group AC --group DPMSControl --key idleTime 0
    kwriteconfig5 --file kscreenlockerrc --group Daemon --key Autolock false
    echo -e "  ${GREEN}✓${NC} KDE settings applied"
fi

# 6. Monitor EDID override (last resort)
echo "6. Checking monitor EDID..."
if command -v get-edid &>/dev/null; then
    # Try to disable monitor's internal power saving
    echo "  Attempting to override monitor power settings..."
    # This varies by monitor, but we can try common DDC/CI commands
    if command -v ddcutil &>/dev/null; then
        ddcutil setvcp 0xd6 0x01 2>/dev/null || true  # Power mode = on
        echo -e "  ${GREEN}✓${NC} DDC/CI commands sent"
    fi
fi

# 7. Install xdotool if missing (for mouse movement simulation)
echo "7. Checking for xdotool..."
if ! command -v xdotool &>/dev/null; then
    echo "  Installing xdotool for input simulation..."
    apt-get update && apt-get install -y xdotool
fi

# 8. Start services
echo "8. Starting services..."
systemctl daemon-reload
systemctl enable powervigil-display-wake.service
systemctl restart powervigil-display-wake.service
echo -e "  ${GREEN}✓${NC} Display wake service started"

# 9. Immediate wake
echo "9. Forcing immediate display wake..."
export DISPLAY=:0
xset -dpms 2>/dev/null
xset dpms 0 0 0 2>/dev/null
xset s off 2>/dev/null
xset s noblank 2>/dev/null
xset dpms force on 2>/dev/null
echo -e "  ${GREEN}✓${NC} Display forced on"

echo ""
echo -e "${GREEN}${BOLD}═══════════════════════════════════════════════════════════════════${NC}"
echo -e "${GREEN}${BOLD}  Aggressive Display Wake Settings Applied${NC}"
echo -e "${GREEN}${BOLD}═══════════════════════════════════════════════════════════════════${NC}"
echo ""
echo "Active protections:"
echo "  ✓ DPMS disabled at X11 config level"
echo "  ✓ Display wake daemon running (wakes every 30 seconds)"
echo "  ✓ Simulated mouse movement to prevent idle"
echo "  ✓ Graphics driver power management disabled"
echo "  ✓ Desktop environment overrides applied"
echo ""
echo -e "${CYAN}Monitor the daemon:${NC}"
echo "  journalctl -u powervigil-display-wake -f"
echo "  tail -f /var/log/powervigil/display-wake.log"
echo ""
echo -e "${YELLOW}Note: You may need to restart your display manager:${NC}"
echo "  sudo systemctl restart gdm3    # For GNOME"
echo "  sudo systemctl restart lightdm # For LightDM"
echo "  sudo systemctl restart sddm    # For KDE"
echo ""
